generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"              // dev: simple & local
  url      = env("DATABASE_URL")   // e.g. file:./prisma/dev.db
}

// ---- Enums ----
enum Stage {
  APPLIED
  SCREENING
  WRITTEN
  VIDEO
  FINAL_CALL
  OFFER
  REJECTED
}

enum QuestionType {
  OPEN
}

enum InterviewType {
  WRITTEN
  VIDEO
}

// ---- Models ----
model Job {
  id           String        @id @default(cuid())
  title        String
  department   String?
  location     String?
  description  String
  status       String        @default("PUBLISHED")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  applications Application[]
  questions    Question[]
  interviews   Interview[]
}

model Candidate {
  id           String        @id @default(cuid())
  email        String        @unique
  // keep both name and first/last optional so older UI still works
  name         String?
  firstName    String?
  lastName     String?
  passwordHash String
  createdAt    DateTime      @default(now())

  applications Application[]
}

model Application {
  id             String     @id @default(cuid())
  jobId          String
  candidateId    String?
  // optional meta used by UI / forms
  candidateName  String?
  email          String?
  phone          String?
  resumeUrl      String?
  coverLetter    String?

  stage          Stage      @default(APPLIED)
  status         String     @default("ACTIVE")
  overallScore   Float?
  finalCallUrl   String?
  finalCallAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  job            Job        @relation(fields: [jobId], references: [id])
  candidate      Candidate? @relation(fields: [candidateId], references: [id])
  interviews     Interview[]
}

model Question {
  id             String       @id @default(cuid())
  jobId          String
  text           String
  type           QuestionType @default(OPEN)
  forStage       Stage        @default(WRITTEN)
  createdAt      DateTime     @default(now())

  job            Job          @relation(fields: [jobId], references: [id])
  answers        Answer[]
  videoResponses VideoResponse[]
}

model Interview {
  id               String   @id @default(cuid())
  applicationId    String
  jobId            String
  type             InterviewType
  assignedAt       DateTime @default(now())
  submittedAt      DateTime?
  durationMins     Int
  // NEW: store exactly which questions HR assigned for this interview (array of IDs)
  assignedQuestionIds Json?
  // ...
  application      Application @relation(fields: [applicationId], references: [id])
  job              Job         @relation(fields: [jobId], references: [id])
  answers          Answer[]
  videos           VideoResponse[]
}
model VideoResponse {
  id           String   @id @default(cuid())
  interviewId  String
  questionId   String?
  filePath     String
  durationSec  Int?
  createdAt    DateTime @default(now())
  attemptCount Int      @default(0)   // <-- must exist

  interview   Interview @relation(fields: [interviewId], references: [id])
  question    Question? @relation(fields: [questionId], references: [id])

  @@unique([interviewId, questionId]) // <-- must exist for upsert by pair
}


model Answer {
  id           String     @id @default(cuid())
  interviewId  String
  questionId   String
  answer       String?
  score        Float?
  notes        String?

  interview    Interview  @relation(fields: [interviewId], references: [id])
  question     Question   @relation(fields: [questionId], references: [id])
}


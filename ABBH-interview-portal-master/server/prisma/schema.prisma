// -----------------------------
// Prisma Client & Datasource
// -----------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// -----------------------------
// Enums
// -----------------------------
enum Stage {
  APPLIED
  SCREENING
  WRITTEN
  VIDEO
  FINAL_CALL
  OFFER
  REJECTED
}

enum QuestionType {
  OPEN
}

enum InterviewType {
  WRITTEN
  VIDEO
}

// -----------------------------
// Models
// -----------------------------

model Job {
  id           String        @id @default(cuid())
  title        String
  department   String?
  location     String?
  description  String
  status       String        @default("PUBLISHED")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  applications Application[]
  questions    Question[]
  interviews   Interview[]
}

model Candidate {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  firstName    String?
  lastName     String?
  passwordHash String
  createdAt    DateTime      @default(now())

  applications Application[]
}

model Application {
  id             String        @id @default(cuid())
  jobId          String
  candidateId    String?

  candidateName  String?
  email          String?
  phone          String?
  resumeUrl      String?
  coverLetter    String?

  stage          Stage         @default(APPLIED)
  status         String        @default("ACTIVE")
  overallScore   Float?
  finalCallUrl   String?
  finalCallAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  job            Job           @relation(fields: [jobId], references: [id])
  candidate      Candidate?    @relation(fields: [candidateId], references: [id])
  interviews     Interview[]
  videos         VideoResponse[]
}

model Question {
  id             String        @id @default(cuid())
  jobId          String

  // FINAL: now required
  prompt         String
  text           String?

  type           QuestionType  @default(OPEN)
  forStage       Stage         @default(WRITTEN)

  // FINAL: now required
  order          Int

  createdAt      DateTime      @default(now())

  job            Job           @relation(fields: [jobId], references: [id])
  answers        Answer[]
  videoResponses VideoResponse[]
}

model Interview {
  id                  String        @id @default(cuid())
  applicationId       String
  jobId               String
  type                InterviewType
  assignedAt          DateTime      @default(now())
  submittedAt         DateTime?
  durationMins        Int?
  assignedQuestionIds Json?

  application         Application   @relation(fields: [applicationId], references: [id])
  job                 Job           @relation(fields: [jobId], references: [id])
  answers             Answer[]
  videos              VideoResponse[]
}

model VideoResponse {
  id             String      @id @default(cuid())

  // FINAL: now required
  applicationId  String

  mimeType       String    
  durationMs     Int         

  questionId     String?
  interviewId    String?

  filePath       String
  startedAt      DateTime?
  endedAt        DateTime?
  createdAt      DateTime     @default(now())
  attemptCount   Int          @default(0)

  application    Application  @relation(fields: [applicationId], references: [id])
  question       Question?    @relation(fields: [questionId], references: [id])
  interview      Interview?   @relation(fields: [interviewId], references: [id])

  @@unique([applicationId, questionId], name: "applicationId_questionId")

  @@index([applicationId])
  @@index([questionId])
  @@index([interviewId])
}

model Answer {
  id           String     @id @default(cuid())
  interviewId  String
  questionId   String
  answer       String?
  score        Float?
  notes        String?

  interview    Interview  @relation(fields: [interviewId], references: [id])
  question     Question   @relation(fields: [questionId], references: [id])

  @@index([interviewId])
  @@index([questionId])
}
